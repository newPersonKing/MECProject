package mec.com.mecprojection.master;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import mec.com.mecprojection.model.CheckData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_DATA".
*/
public class CheckDataDao extends AbstractDao<CheckData, Long> {

    public static final String TABLENAME = "CHECK_DATA";

    /**
     * Properties of entity CheckData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AngeGrop = new Property(1, int.class, "angeGrop", false, "ANGE_GROP");
        public final static Property MaleWeak = new Property(2, double.class, "maleWeak", false, "MALE_WEAK");
        public final static Property MaleStrong = new Property(3, double.class, "maleStrong", false, "MALE_STRONG");
        public final static Property FemaleWeak = new Property(4, double.class, "femaleWeak", false, "FEMALE_WEAK");
        public final static Property FemaleStrong = new Property(5, double.class, "femaleStrong", false, "FEMALE_STRONG");
        public final static Property Type = new Property(6, double.class, "type", false, "TYPE");
    }


    public CheckDataDao(DaoConfig config) {
        super(config);
    }
    
    public CheckDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ANGE_GROP\" INTEGER NOT NULL ," + // 1: angeGrop
                "\"MALE_WEAK\" REAL NOT NULL ," + // 2: maleWeak
                "\"MALE_STRONG\" REAL NOT NULL ," + // 3: maleStrong
                "\"FEMALE_WEAK\" REAL NOT NULL ," + // 4: femaleWeak
                "\"FEMALE_STRONG\" REAL NOT NULL ," + // 5: femaleStrong
                "\"TYPE\" REAL NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAngeGrop());
        stmt.bindDouble(3, entity.getMaleWeak());
        stmt.bindDouble(4, entity.getMaleStrong());
        stmt.bindDouble(5, entity.getFemaleWeak());
        stmt.bindDouble(6, entity.getFemaleStrong());
        stmt.bindDouble(7, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAngeGrop());
        stmt.bindDouble(3, entity.getMaleWeak());
        stmt.bindDouble(4, entity.getMaleStrong());
        stmt.bindDouble(5, entity.getFemaleWeak());
        stmt.bindDouble(6, entity.getFemaleStrong());
        stmt.bindDouble(7, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckData readEntity(Cursor cursor, int offset) {
        CheckData entity = new CheckData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // angeGrop
            cursor.getDouble(offset + 2), // maleWeak
            cursor.getDouble(offset + 3), // maleStrong
            cursor.getDouble(offset + 4), // femaleWeak
            cursor.getDouble(offset + 5), // femaleStrong
            cursor.getDouble(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAngeGrop(cursor.getInt(offset + 1));
        entity.setMaleWeak(cursor.getDouble(offset + 2));
        entity.setMaleStrong(cursor.getDouble(offset + 3));
        entity.setFemaleWeak(cursor.getDouble(offset + 4));
        entity.setFemaleStrong(cursor.getDouble(offset + 5));
        entity.setType(cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
