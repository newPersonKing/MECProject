package mec.com.mecprojection.master;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import mec.com.mecprojection.model.UserMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MESSAGE".
*/
public class UserMessageDao extends AbstractDao<UserMessage, Long> {

    public static final String TABLENAME = "USER_MESSAGE";

    /**
     * Properties of entity UserMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Top_number = new Property(2, double.class, "top_number", false, "TOP_NUMBER");
        public final static Property Top_body = new Property(3, double.class, "top_body", false, "TOP_BODY");
        public final static Property Top_chest = new Property(4, double.class, "top_chest", false, "TOP_CHEST");
        public final static Property Top_waist = new Property(5, double.class, "top_waist", false, "TOP_WAIST");
        public final static Property Top_sleeve = new Property(6, double.class, "top_sleeve", false, "TOP_SLEEVE");
        public final static Property Bottom_number = new Property(7, double.class, "bottom_number", false, "BOTTOM_NUMBER");
        public final static Property Bottom_out_seam = new Property(8, double.class, "bottom_out_seam", false, "BOTTOM_OUT_SEAM");
        public final static Property Bottom_waist = new Property(9, double.class, "bottom_waist", false, "BOTTOM_WAIST");
        public final static Property Bottom_hip = new Property(10, double.class, "bottom_hip", false, "BOTTOM_HIP");
        public final static Property Bottom_sleeve = new Property(11, double.class, "bottom_sleeve", false, "BOTTOM_SLEEVE");
    }


    public UserMessageDao(DaoConfig config) {
        super(config);
    }
    
    public UserMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"TOP_NUMBER\" REAL NOT NULL ," + // 2: top_number
                "\"TOP_BODY\" REAL NOT NULL ," + // 3: top_body
                "\"TOP_CHEST\" REAL NOT NULL ," + // 4: top_chest
                "\"TOP_WAIST\" REAL NOT NULL ," + // 5: top_waist
                "\"TOP_SLEEVE\" REAL NOT NULL ," + // 6: top_sleeve
                "\"BOTTOM_NUMBER\" REAL NOT NULL ," + // 7: bottom_number
                "\"BOTTOM_OUT_SEAM\" REAL NOT NULL ," + // 8: bottom_out_seam
                "\"BOTTOM_WAIST\" REAL NOT NULL ," + // 9: bottom_waist
                "\"BOTTOM_HIP\" REAL NOT NULL ," + // 10: bottom_hip
                "\"BOTTOM_SLEEVE\" REAL NOT NULL );"); // 11: bottom_sleeve
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindDouble(3, entity.getTop_number());
        stmt.bindDouble(4, entity.getTop_body());
        stmt.bindDouble(5, entity.getTop_chest());
        stmt.bindDouble(6, entity.getTop_waist());
        stmt.bindDouble(7, entity.getTop_sleeve());
        stmt.bindDouble(8, entity.getBottom_number());
        stmt.bindDouble(9, entity.getBottom_out_seam());
        stmt.bindDouble(10, entity.getBottom_waist());
        stmt.bindDouble(11, entity.getBottom_hip());
        stmt.bindDouble(12, entity.getBottom_sleeve());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindDouble(3, entity.getTop_number());
        stmt.bindDouble(4, entity.getTop_body());
        stmt.bindDouble(5, entity.getTop_chest());
        stmt.bindDouble(6, entity.getTop_waist());
        stmt.bindDouble(7, entity.getTop_sleeve());
        stmt.bindDouble(8, entity.getBottom_number());
        stmt.bindDouble(9, entity.getBottom_out_seam());
        stmt.bindDouble(10, entity.getBottom_waist());
        stmt.bindDouble(11, entity.getBottom_hip());
        stmt.bindDouble(12, entity.getBottom_sleeve());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserMessage readEntity(Cursor cursor, int offset) {
        UserMessage entity = new UserMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getDouble(offset + 2), // top_number
            cursor.getDouble(offset + 3), // top_body
            cursor.getDouble(offset + 4), // top_chest
            cursor.getDouble(offset + 5), // top_waist
            cursor.getDouble(offset + 6), // top_sleeve
            cursor.getDouble(offset + 7), // bottom_number
            cursor.getDouble(offset + 8), // bottom_out_seam
            cursor.getDouble(offset + 9), // bottom_waist
            cursor.getDouble(offset + 10), // bottom_hip
            cursor.getDouble(offset + 11) // bottom_sleeve
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTop_number(cursor.getDouble(offset + 2));
        entity.setTop_body(cursor.getDouble(offset + 3));
        entity.setTop_chest(cursor.getDouble(offset + 4));
        entity.setTop_waist(cursor.getDouble(offset + 5));
        entity.setTop_sleeve(cursor.getDouble(offset + 6));
        entity.setBottom_number(cursor.getDouble(offset + 7));
        entity.setBottom_out_seam(cursor.getDouble(offset + 8));
        entity.setBottom_waist(cursor.getDouble(offset + 9));
        entity.setBottom_hip(cursor.getDouble(offset + 10));
        entity.setBottom_sleeve(cursor.getDouble(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
